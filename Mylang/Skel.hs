-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Mylang.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Mylang.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: Mylang.Abs.Id -> Result
transId x = case x of
  Mylang.Abs.Id string -> failure x

transMyInteger :: Mylang.Abs.MyInteger -> Result
transMyInteger x = case x of
  Mylang.Abs.MyInteger string -> failure x

transMyString :: Mylang.Abs.MyString -> Result
transMyString x = case x of
  Mylang.Abs.MyString string -> failure x

transProgram :: Mylang.Abs.Program -> Result
transProgram x = case x of
  Mylang.Abs.Prog id compoundstatement -> failure x

transVariable :: Mylang.Abs.Variable -> Result
transVariable x = case x of
  Mylang.Abs.Var id -> failure x

transAssignOp :: Mylang.Abs.AssignOp -> Result
transAssignOp x = case x of
  Mylang.Abs.AssignmentOp -> failure x

transType :: Mylang.Abs.Type -> Result
transType x = case x of
  Mylang.Abs.Type standardtype -> failure x
  Mylang.Abs.ArrayType myinteger -> failure x

transStandardType :: Mylang.Abs.StandardType -> Result
transStandardType x = case x of
  Mylang.Abs.StdType -> failure x

transStatement :: Mylang.Abs.Statement -> Result
transStatement x = case x of
  Mylang.Abs.AssignStmt variable assignop expression -> failure x
  Mylang.Abs.ProcStmt procedurestatement -> failure x
  Mylang.Abs.CompStmt compoundstatement -> failure x
  Mylang.Abs.IfThenElseStmt expression statement1 statement2 -> failure x
  Mylang.Abs.IfThenStmt expression statement -> failure x
  Mylang.Abs.WhileDoStmt expression statement -> failure x
  Mylang.Abs.ReadStmt readstatement -> failure x
  Mylang.Abs.WriteStmt writestatement -> failure x

transExpression :: Mylang.Abs.Expression -> Result
transExpression x = case x of
  Mylang.Abs.EAdd expression term -> failure x
  Mylang.Abs.ESub expression term -> failure x
  Mylang.Abs.ETerm term -> failure x

transTerm :: Mylang.Abs.Term -> Result
transTerm x = case x of
  Mylang.Abs.EMul term factor -> failure x
  Mylang.Abs.EDiv term factor -> failure x
  Mylang.Abs.ETermF factor -> failure x

transFactor :: Mylang.Abs.Factor -> Result
transFactor x = case x of
  Mylang.Abs.EInt myinteger -> failure x
  Mylang.Abs.EVar variable -> failure x
  Mylang.Abs.EParen expression -> failure x

transProcedureStatement :: Mylang.Abs.ProcedureStatement -> Result
transProcedureStatement x = case x of
  Mylang.Abs.ProcNoArgs id -> failure x
  Mylang.Abs.ProcWithArgs id expressionlist -> failure x

transExpressionList :: Mylang.Abs.ExpressionList -> Result
transExpressionList x = case x of
  Mylang.Abs.ListExp expression -> failure x
  Mylang.Abs.ListExpCons expression expressionlist -> failure x

transCompoundStatement :: Mylang.Abs.CompoundStatement -> Result
transCompoundStatement x = case x of
  Mylang.Abs.CompSt statementlist -> failure x

transStatementList :: Mylang.Abs.StatementList -> Result
transStatementList x = case x of
  Mylang.Abs.ListStmt statement -> failure x
  Mylang.Abs.ListStmtCons statement statementlist -> failure x

transReadStatement :: Mylang.Abs.ReadStatement -> Result
transReadStatement x = case x of
  Mylang.Abs.ReadSt variable -> failure x

transWriteStatement :: Mylang.Abs.WriteStatement -> Result
transWriteStatement x = case x of
  Mylang.Abs.WriteSt expression -> failure x
