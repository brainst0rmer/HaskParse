-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language mylang.

module Mylang.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Prog Program Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Variable = Var Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AssignOp = AssignOp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = Type StandardType | ArrayType Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StandardType = StdType Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Statement
    = AssignStmt Variable AssignOp Expression
    | ProcStmt ProcedureStatement
    | CompStmt CompoundStatement
    | IfThenElseStmt Expression Statement Statement
    | IfThenStmt Expression Statement
    | WhileDoStmt Expression Statement
    | ReadStmt ReadStatement
    | WriteStmt WriteStatement
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expression
    = EAdd Expression Term | ESub Expression Term | ETerm Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Term = EMul Term Factor | EDiv Term Factor | ETermF Factor
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Factor = EInt Integer | EVar Variable | EParen Expression
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ProcedureStatement
    = ProcNoArgs Id | ProcWithArgs Id ExpressionList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ExpressionList
    = ListExp Expression | ListExpCons Expression ExpressionList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CompoundStatement = CompSt StatementList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StatementList
    = ListStmt Statement | ListStmtCons Statement StatementList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ReadStatement = ReadSt Variable
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WriteStatement = WriteSt Expression
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Id = Id String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Integer = Integer String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype String = String String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

